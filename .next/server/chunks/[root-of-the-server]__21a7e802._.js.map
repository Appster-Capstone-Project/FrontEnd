{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/events/stream/route.ts"],"sourcesContent":["\nimport type { NextRequest } from \"next/server\";\n\nexport const dynamic = 'force-dynamic'; // Ensures this route is not statically built\n\nexport const GET = async (req: NextRequest) => {\n  const token = req.headers.get(\"authorization\"); // get frontend token\n  if (!token) {\n    console.error('[SSE PROXY] Authorization header missing from client request.');\n    return new Response(\"Unauthorized: Authorization header is required\", { status: 401 });\n  }\n\n  // Open a server-to-server connection to your backend SSE\n  const backendUrl = `${process.env.NEXT_PUBLIC_API_BASE_URL}/events/stream`;\n  \n  console.log(`[SSE PROXY] Attempting to connect to backend: ${backendUrl}`);\n\n  try {\n    const backendRes = await fetch(backendUrl, {\n      headers: { Authorization: token },\n      // @ts-ignore\n      duplex: 'half', // Required for streaming with Node.js fetch\n    });\n\n    if (!backendRes.ok || !backendRes.body) {\n      const errorBody = await backendRes.text();\n      console.error(`[SSE PROXY] Backend connection failed with status ${backendRes.status}: ${errorBody}`);\n      return new Response(`Backend SSE connection failed: ${errorBody}`, { status: backendRes.status });\n    }\n    \n    console.log('[SSE PROXY] Successfully connected to backend stream. Piping to client.');\n\n    // Pipe the backend SSE stream directly to the frontend\n    return new Response(backendRes.body, {\n      headers: {\n        \"Content-Type\": \"text/event-stream\",\n        \"Cache-Control\": \"no-cache\",\n        Connection: \"keep-alive\",\n      },\n    });\n\n  } catch (error) {\n    console.error('[SSE PROXY] An unexpected error occurred:', error);\n    return new Response('Internal Server Error while connecting to stream', { status: 500 });\n  }\n};\n"],"names":[],"mappings":";;;;AAGO,MAAM,UAAU,iBAAiB,6CAA6C;AAE9E,MAAM,MAAM,OAAO;IACxB,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,qBAAqB;IACrE,IAAI,CAAC,OAAO;QACV,QAAQ,KAAK,CAAC;QACd,OAAO,IAAI,SAAS,kDAAkD;YAAE,QAAQ;QAAI;IACtF;IAEA,yDAAyD;IACzD,MAAM,aAAa,kEAAwC,cAAc,CAAC;IAE1E,QAAQ,GAAG,CAAC,CAAC,8CAA8C,EAAE,YAAY;IAEzE,IAAI;QACF,MAAM,aAAa,MAAM,MAAM,YAAY;YACzC,SAAS;gBAAE,eAAe;YAAM;YAChC,aAAa;YACb,QAAQ;QACV;QAEA,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,IAAI,EAAE;YACtC,MAAM,YAAY,MAAM,WAAW,IAAI;YACvC,QAAQ,KAAK,CAAC,CAAC,kDAAkD,EAAE,WAAW,MAAM,CAAC,EAAE,EAAE,WAAW;YACpG,OAAO,IAAI,SAAS,CAAC,+BAA+B,EAAE,WAAW,EAAE;gBAAE,QAAQ,WAAW,MAAM;YAAC;QACjG;QAEA,QAAQ,GAAG,CAAC;QAEZ,uDAAuD;QACvD,OAAO,IAAI,SAAS,WAAW,IAAI,EAAE;YACnC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,YAAY;YACd;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6CAA6C;QAC3D,OAAO,IAAI,SAAS,oDAAoD;YAAE,QAAQ;QAAI;IACxF;AACF","debugId":null}}]
}